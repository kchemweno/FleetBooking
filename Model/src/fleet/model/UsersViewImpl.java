package fleet.model;

import fleet.model.common.UsersView;
import oracle.jbo.server.ViewObjectImpl;
import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCDataControl;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;
import oracle.adf.share.security.SecurityContext;
import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.client.Configuration;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 30 12:49:27 EAT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UsersViewImpl extends ViewObjectImpl implements UsersView {
    
    /**
     // * This is the default constructor (do not remove).
     */
    //   private ApplicationModule appMod;

    public UsersViewImpl() {       
    }
    
    public static int loggedinUserId;
    public static String loggedInUsername;

    //Get userId for username
    public int getUserId(String username) {
        ApplicationModule appMod=null;
        UsersViewImpl vo;
        int userId = 0;
        try{
         appMod = Configuration.createRootApplicationModule("fleet.model.AppModule", "AppModuleFleetLocal");
         vo = (UsersViewImpl) appMod.findViewObject("UsersView1");
        //Create View criteria
        ViewCriteria viewCriteria = vo.createViewCriteria();
        ViewCriteriaRow viewCriteriaRow = viewCriteria.createViewCriteriaRow();
        viewCriteriaRow.setAttribute("Username", username);
        viewCriteria.add(viewCriteriaRow);
        viewCriteria.setCriteriaMode(ViewCriteria.CRITERIA_MODE_CACHE);
        vo.applyViewCriteria(viewCriteria);
        vo.executeQuery();       
        while (vo.hasNext()) {
            UsersViewRowImpl row = (UsersViewRowImpl) vo.next();
            userId = row.getId();
        }
        }finally{
            if(appMod != null){
                Configuration.releaseRootApplicationModule(appMod, false);                      
            }
        }        
        return userId;
    } 

    public String getUserFullname(String userId) {
        ApplicationModule appMod=null;
        UsersViewImpl vo;
        String providerDisplayName = "";
        try{                   
         appMod = Configuration.createRootApplicationModule("fleet.model.AppModule", "AppModuleFleetLocal");
         vo = (UsersViewImpl) appMod.findViewObject("UsersView1");
        //Create View criteria
        ViewCriteria viewCriteria = vo.createViewCriteria();
        ViewCriteriaRow viewCriteriaRow = viewCriteria.createViewCriteriaRow();
        viewCriteriaRow.setAttribute("Id", userId);
        viewCriteria.add(viewCriteriaRow);
        viewCriteria.setCriteriaMode(ViewCriteria.CRITERIA_MODE_CACHE);
        vo.applyViewCriteria(viewCriteria);
        vo.executeQuery();
        while (vo.hasNext()) {
            UsersViewRowImpl row = (UsersViewRowImpl) vo.next();
            //System.out.println(row.getAttribute("FirstName") + " " + row.getLastName() + " : "+userId);
            providerDisplayName = row.getAttribute("FirstName") + " " + row.getLastName();
        }        
        }catch(Exception exception){
            System.err.println("Error geting user fullname based on userId in String getUserFullname(String userId)");
            exception.printStackTrace();
        }finally{
            if(appMod != null){
                Configuration.releaseRootApplicationModule(appMod, false);                      
            }
        }
        return providerDisplayName;
    }

    //Get email for userId
    public String getEmail(String userId) {
        String userEmail = "";
        ApplicationModule appMod=null;
        UsersViewImpl vo;
        try{
            appMod = Configuration.createRootApplicationModule("fleet.model.AppModule", "AppModuleFleetLocal");
            vo = (UsersViewImpl) appMod.findViewObject("UsersView1");
        //Create View criteria
        ViewCriteria viewCriteria = vo.createViewCriteria();
        ViewCriteriaRow viewCriteriaRow = viewCriteria.createViewCriteriaRow();
        viewCriteriaRow.setAttribute("Id", userId);
        viewCriteria.add(viewCriteriaRow);
        viewCriteria.setCriteriaMode(ViewCriteria.CRITERIA_MODE_CACHE);
        vo.applyViewCriteria(viewCriteria);
        vo.executeQuery();        
        while (vo.hasNext()) {
            UsersViewRowImpl row = (UsersViewRowImpl) vo.next();
            userEmail = row.getEmail();
        }
        }catch(Exception exception){
            System.err.println("Error geting email based on userId");
        }finally{
            if(appMod != null){
                Configuration.releaseRootApplicationModule(appMod, false);                      
            }
        }
        return userEmail;
    } 

    /**
     * Returns the variable value for bind_userid.
     * @return variable value for bind_userid
     */
    public String getbind_userid() {
        return (String) ensureVariableManager().getVariableValue("bind_userid");
    }

    /**
     * Sets <code>value</code> for variable bind_userid.
     * @param value value to bind as bind_userid
     */
    public void setbind_userid(String value) {
        ensureVariableManager().setVariableValue("bind_userid", value);
    }

    public static void setLoggedinUserId(int loggedinUserId) {
        UsersViewImpl.loggedinUserId = loggedinUserId;
    }

    public static int getLoggedinUserId() {
        return loggedinUserId;
    }
    
    //Similar method to one above.
    public int getCurrentlyLoggedInUserId(){
        ADFContext adfCotnext = ADFContext.getCurrent();
        SecurityContext securityContext = adfCotnext.getSecurityContext();
        String user = securityContext.getUserName();
        int userId = getUserId(user);
        return userId;
    }
    
    public static String getLoggedInUsername(){
    ADFContext adfCtx = ADFContext.getCurrent();  
       SecurityContext secCntx = adfCtx.getSecurityContext();  
      // String user = secCntx.getUserPrincipal().getName();  
        UsersViewImpl.loggedInUsername = secCntx.getUserName();   
        
       return UsersViewImpl.loggedInUsername;
    }   
}

